// GitHub API v3

import { configuration, type Configuration } from '$core/configuration/state';
import { FetchError } from '$core/model/fetch.error';
import { Optional } from '$core/model/optional';
import { Result } from '$core/model/result';
import { get } from 'svelte/store';
import { blobToBase64 } from '$core/utils/file';

const baseURL = 'https://api.github.com';
let config: Optional<Configuration> = Optional.empty();

export async function getContent(
	user: string,
	repository: string,
): Promise<Result<Response, FetchError>> {
	return await gitFetch(`${baseURL}/repos/${user}/${repository}/contents/`, {
		cache: 'no-store',
	});
}

export async function getBlob(url: string): Promise<Result<Response, FetchError>> {
	return await gitFetch(url);
}

export async function putBlob(user: string, repo: string, blob: Blob, path: string, sha?: string) {
	return await gitFetch(`${baseURL}/repos/${user}/${repo}/contents/${path}`, {
		method: 'PUT',
		body: JSON.stringify({
			message: '[Auto] Database Update',
			content: await blobToBase64(blob),
			sha,
		}),
	});
}

export async function createRepository(repository: string): Promise<Result<Response, FetchError>> {
	return await gitFetch(`${baseURL}/user/repos`, {
		method: 'POST',
		body: JSON.stringify({
			name: repository,
			description: 'Autogenerated repository created by NALA',
			private: true,
			has_wiki: false,
			has_projects: false,
			has_issues: false,
		}),
	});
}

async function gitFetch(
	url: RequestInfo,
	options?: RequestInit,
): Promise<Result<Response, FetchError>> {
	if (!config.isPresent()) {
		setToken();
	}
	const updatedOptions = { ...options };
	updatedOptions.headers = {
		...updatedOptions.headers,
		Authorization: `Bearer ${config.get().github.accessToken}`,
	};
	const response = await fetch(url, updatedOptions);
	if (!response.ok) {
		return Result.err(FetchError.from(response));
	}
	return Result.ok(response);
}

function setToken() {
	// Acceptable because the properties are extremely static
	config = Optional.of(get(configuration));
	if (config.get() == null) {
		throw new Error('Cannot contact GitHub API without configuration');
	}
}
